# Audio Dock
@prefix : <ex#>.
@prefix local: <local#>.
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>.
@prefix dbpedia: <http://dbpedia.org/resource/>.
@prefix geonames: <http://www.geonames.org/ontology#>.
@prefix http: <http://www.w3.org/2011/http#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix st: <http://purl.org/restdesc/states#>.
@prefix ex: <http://example.org/#>.

# Play
# st:replaced :playing
# PUT /audio/play "play"

# Pause
# st:remove :playing; st:add :paused
# PUT /audio/play "pause"

# Unpause
# st:remove :paused; st:add :playing
# PUT /audio/play "play"

# Resume
# st:replaced :playing
# PUT /audio/play ?position

# Stop
# st:replaced :stopped
# PUT /audio/play "stop"

#Position

# Set Song

local:musicplayer a dbpedia:Media_player.

local:devicelocation a :question;
	:text ("Where is the music player located?");
	:replyType :location.

local:musicplayer :hasState local:state.

{
	local:devicelocation :hasAnswer ?a

} => {
	local:musicplayer geonames:locatedIn  ?a.
}.


{
	local:musicplayer geonames:locatedIn  ?a.

} => {
	local:devicelocation :hasAnswer ?a
}.
 

 


#Configure Song
{
	local:musicplayer geonames:locatedIn ?mediaplayerPlace.

	?song a dbpedia:Song;
       :name ?new;
       :postion ?x.
  
	?state a st:State.
	?state log:includes { local:state :power :on. }.
	[] e:optional { ?state log:includes { ?mediaplayerPlace ex:song ?old. }. }.

	?url a local:url.
}
=>
{
	_:request http:methodName "PUT";
		http:requestURI (?url "/audio/now");
	http:reqBody ?new.

	[ a st:StateChange;
		st:replaced { ?mediaplayerPlace :song ?song. };
		st:parent ?state ].
}.


{
	local:musicplayer geonames:locatedIn ?mediaplayerPlace.
 
	?state a st:State.
	?state log:includes { local:state :power :on. ?mediaplayerPlace :song ?song. }. 

	?url a local:url.
   ?songState a :PaybackState; :command ?s.
}
=>
{
	_:request http:methodName "PUT";
		http:requestURI (?url "/audio/play");
	http:reqBody  ?s.

	[ a st:StateChange;
		st:replaced { ?mediaplayerPlace :songState ?songState};
		st:parent ?state ].
}.


{
	local:musicplayer geonames:locatedIn ?mediaplayerPlace.
 
  
	?song a dbpedia:Song;
       :postion ?x.
  
	?state a st:State.
	?state log:includes { local:state :power :on. ?mediaplayerPlace :song ?song. }. 

	?url a local:url. 
}
=>
{
	_:request http:methodName "PUT";
		http:requestURI (?url "/audio/play");
	http:reqBody  ?x.

	[ a st:StateChange;
		st:replaced { ?mediaplayerPlace :songState :play};
		st:parent ?state ].
}.


 

# Switch on
{
	?state a st:State;
	log:includes {local:state :power :off.}.
	?url a local:url.
} => {
	_:request http:methodName "PUT";
	http:requestURI (?url "/pwr/switch");
	http:reqBody "1".

	[ a st:StateChange;
	st:replaced { local:state :power :on.};
	st:parent ?state ].
}.

# Switch off
{
	?state a st:State;
	log:includes {local:state :power :on.}.
	?url a local:url.
} => {
	_:request http:methodName "PUT";
	http:requestURI (?url "/pwr/switch");
	http:reqBody "0".

	[ a st:StateChange;
	st:replaced { local:state :power :off.};
	st:parent ?state ].
}.



# Initial state

{
  
	local:state :power ?powerstate.

}=>{

 
  { local:state :power ?powerstate.} a st:InitialState.
}.


{
	local:musicplayer geonames:locatedIn ?mediaplayerPlace.
	 local:state :song ?song. 
   local:state :state ?state.
	 
}
=>
{   
  { ?mediaplayerPlace :song ?song. ?mediaplayerPlace :songState ?state} a st:InitialState.
}.



# Song read
{
	?url a local:url.
   local:state :song ?song.
} => {
	_:request http:methodName "GET";
	http:requestURI (?url "/audio/play");
     http:resp ?pos.
	?song :postion ?pos.
}.



:stop a :PaybackState; :command "stop".
:pause a :PaybackState; :command "pause".

